import { ActionPayload } from './action-payload';
export interface SwUserData {
    username?: string;
    profileImageUrl?: string;
    role?: string;
    commitment: number;
    isLoggedIn: boolean;
}
export declare const initialState: SwUserData;
export interface UserState {
    username: string;
    profileImageUrl: string;
    isLoggedIn?: boolean;
}
export declare const swUserDataSlice: import("@reduxjs/toolkit").Slice<SwUserData, {
    setLoggedIn(state: import("immer/dist/internal").WritableDraft<SwUserData>, action: ActionPayload<boolean>): void;
    setCommitment(state: import("immer/dist/internal").WritableDraft<SwUserData>, action: ActionPayload<number>): void;
    setRole(state: import("immer/dist/internal").WritableDraft<SwUserData>, action: ActionPayload<string>): void;
    setUserData(state: import("immer/dist/internal").WritableDraft<SwUserData>, action: ActionPayload<UserState>): void;
}, "swUserData">;
export declare const setUserData: import("@reduxjs/toolkit").ActionCreatorWithOptionalPayload<UserState, string>, setLoggedIn: import("@reduxjs/toolkit").ActionCreatorWithOptionalPayload<boolean, string>, setRole: import("@reduxjs/toolkit").ActionCreatorWithOptionalPayload<string, string>, setCommitment: import("@reduxjs/toolkit").ActionCreatorWithOptionalPayload<number, string>;
export declare const currentUserState: (state: any) => SwUserData;
declare const _default: import("redux").Reducer<SwUserData, import("redux").AnyAction>;
export default _default;
