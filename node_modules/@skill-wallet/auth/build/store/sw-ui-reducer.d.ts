import { ActionPayload } from './action-payload';
export interface SwUIState {
    showDialog: boolean;
    displayButton: boolean;
    disableCreateNewUser: boolean;
    loading: boolean;
    loadingMessage: string;
    globalErrorMessage: string;
    showGlobalError: boolean;
    validatingDomain: boolean;
}
export interface LoadingData {
    loading: boolean;
    loadingMessage?: string;
}
export declare const initialState: SwUIState;
export declare const swUIlice: import("@reduxjs/toolkit").Slice<SwUIState, {
    showDialog: (state: import("immer/dist/internal").WritableDraft<SwUIState>, action: ActionPayload<boolean>) => void;
    setDisableCreateNewUser: (state: import("immer/dist/internal").WritableDraft<SwUIState>, action: ActionPayload<boolean>) => void;
    setDisplayButton: (state: import("immer/dist/internal").WritableDraft<SwUIState>, action: ActionPayload<boolean>) => void;
    setLoading: (state: import("immer/dist/internal").WritableDraft<SwUIState>, action: ActionPayload<boolean>) => void;
    startLoading: (state: import("immer/dist/internal").WritableDraft<SwUIState>, action: ActionPayload<string>) => void;
    setLoadingMessage: (state: import("immer/dist/internal").WritableDraft<SwUIState>, action: ActionPayload<string>) => void;
    setLoadingData: (state: import("immer/dist/internal").WritableDraft<SwUIState>, action: ActionPayload<LoadingData>) => void;
    loadingFinished: (state: import("immer/dist/internal").WritableDraft<SwUIState>, action: ActionPayload<void>) => void;
    startValidatingDomain: (state: import("immer/dist/internal").WritableDraft<SwUIState>, action: ActionPayload<void>) => void;
    finishValidatingDomain: (state: import("immer/dist/internal").WritableDraft<SwUIState>, action: ActionPayload<void>) => void;
    showGlobalError: (state: import("immer/dist/internal").WritableDraft<SwUIState>, action: ActionPayload<string>) => void;
}, "swUI">;
export declare const setDisplayButton: import("@reduxjs/toolkit").ActionCreatorWithOptionalPayload<boolean, string>, showDialog: import("@reduxjs/toolkit").ActionCreatorWithOptionalPayload<boolean, string>, setLoading: import("@reduxjs/toolkit").ActionCreatorWithOptionalPayload<boolean, string>, setDisableCreateNewUser: import("@reduxjs/toolkit").ActionCreatorWithOptionalPayload<boolean, string>, setLoadingMessage: import("@reduxjs/toolkit").ActionCreatorWithOptionalPayload<string, string>, setLoadingData: import("@reduxjs/toolkit").ActionCreatorWithOptionalPayload<LoadingData, string>, loadingFinished: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>, startLoading: import("@reduxjs/toolkit").ActionCreatorWithOptionalPayload<string, string>, startValidatingDomain: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>, showGlobalError: import("@reduxjs/toolkit").ActionCreatorWithOptionalPayload<string, string>, finishValidatingDomain: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
export declare const isOpen: ((state: {}) => any) & import("reselect").OutputSelectorFields<(args_0: any) => any> & {
    clearCache: () => void;
};
export declare const showButton: ((state: {}) => any) & import("reselect").OutputSelectorFields<(args_0: any) => any> & {
    clearCache: () => void;
};
export declare const loadingInProgress: ((state: {}) => any) & import("reselect").OutputSelectorFields<(args_0: any) => any> & {
    clearCache: () => void;
};
export declare const uiData: ((state: {}) => any) & import("reselect").OutputSelectorFields<(args_0: {
    loading: any;
    loadingMessage: any;
    validatingDomain: any;
    globalErrorMessage: any;
    showGlobalError: any;
}) => any> & {
    clearCache: () => void;
};
declare const _default: import("redux").Reducer<SwUIState, import("redux").AnyAction>;
export default _default;
