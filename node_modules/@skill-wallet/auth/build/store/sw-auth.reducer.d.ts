import { Community, PartnerAgreementKey } from '../services/web3/models';
import { ActionPayload } from './action-payload';
export interface SwAuthState {
    partnerKey?: string;
    partnerAddress?: string;
    communityAddress?: string;
    partnerMode?: boolean;
    community: Community & PartnerAgreementKey;
    mode: string;
}
export declare const initialState: SwAuthState;
export interface UserData {
    username: string;
    profileImageUrl: string;
}
export interface UserState {
    username: string;
    profileImageUrl: string;
    isLoggedIn: boolean;
}
export declare const swAuthSlice: import("@reduxjs/toolkit").Slice<SwAuthState, {
    setPartnerKey: (state: import("immer/dist/internal").WritableDraft<SwAuthState>, action: ActionPayload<string>) => void;
    setPartnerAddress: (state: import("immer/dist/internal").WritableDraft<SwAuthState>, action: ActionPayload<string>) => void;
    setCommunity: (state: import("immer/dist/internal").WritableDraft<SwAuthState>, action: ActionPayload<any>) => void;
    setPartnerMode: (state: import("immer/dist/internal").WritableDraft<SwAuthState>, action: ActionPayload<boolean>) => void;
}, "swAuth">;
export declare const setPartnerKey: import("@reduxjs/toolkit").ActionCreatorWithOptionalPayload<string, string>, setCommunity: import("@reduxjs/toolkit").ActionCreatorWithPayload<any, string>, setPartnerMode: import("@reduxjs/toolkit").ActionCreatorWithOptionalPayload<boolean, string>;
export declare const currentPartnerKey: ((state: {}) => any) & import("reselect").OutputSelectorFields<(args_0: any) => any> & {
    clearCache: () => void;
};
export declare const currentCommunity: ((state: {}) => Community & PartnerAgreementKey) & import("reselect").OutputSelectorFields<(args_0: Community & PartnerAgreementKey) => Community & PartnerAgreementKey & {
    clearCache: () => void;
}> & {
    clearCache: () => void;
};
export declare const partnerMode: ((state: {}) => any) & import("reselect").OutputSelectorFields<(args_0: any) => any> & {
    clearCache: () => void;
};
export declare const swData: ((state: {}) => any) & import("reselect").OutputSelectorFields<(args_0: {
    community: any;
    partnerMode: any;
    partnerKey: any;
    disableCreateNewUser: any;
}) => any> & {
    clearCache: () => void;
};
declare const _default: import("redux").Reducer<SwAuthState, import("redux").AnyAction>;
export default _default;
