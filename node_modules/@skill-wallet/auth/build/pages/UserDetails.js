var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useState } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { SwButton, SwUploadFile, toBase64 } from 'sw-web-shared';
import { useHistory } from 'react-router-dom';
import { Box, Button, Typography } from '@mui/material';
import { Controller, useForm } from 'react-hook-form';
import { swData } from '../store/sw-auth.reducer';
import { currentUserState, setUserData } from '../store/sw-user-data.reducer';
import { ReactComponent as Upload } from '../assets/upload.svg';
import { CustomInput } from '../components/CustomInput';
import BackButton from '../components/BackButton';
var UserDetails = function (props) {
    var swState = useSelector(swData);
    var swUserState = useState(useSelector(currentUserState))[0];
    var _a = useState(undefined), errorData = _a[0], setErrorData = _a[1];
    var history = useHistory();
    var dispatch = useDispatch();
    console.log(swUserState);
    var _b = useForm({
        mode: 'onChange',
        defaultValues: swUserState,
    }), handleSubmit = _b.handleSubmit, control = _b.control, setValue = _b.setValue, isValid = _b.formState.isValid;
    var onSubmit = function (data) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            dispatch(setUserData(data));
            if (swState.partnerMode) {
                history.push('/partnerRole');
            }
            else {
                history.push('/role');
            }
            return [2 /*return*/];
        });
    }); };
    var handleBackClick = function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            history.goBack();
            return [2 /*return*/];
        });
    }); };
    return (_jsx(Box, __assign({ sx: {
            width: '100%',
            minHeight: '460px',
            display: 'flex',
            justifyContent: 'space-around',
            flexDirection: 'column',
            alignItems: 'center',
        } }, { children: _jsxs(_Fragment, { children: [_jsxs(Box, __assign({ sx: {
                        width: '100%',
                        display: 'flex',
                        justifyContent: 'space-between',
                        alignContent: 'center',
                    } }, { children: [_jsx(BackButton, { handleClick: handleBackClick }, void 0), _jsxs(Box, __assign({ sx: {
                                flexGrow: 1,
                                display: 'flex',
                                flexDirection: 'column',
                                justifyContent: 'center',
                                alignItems: 'center',
                            } }, { children: [swState.isPartner ? (_jsx(Typography, __assign({ align: "center", variant: "h2", sx: { fontWeight: '400', maxWidth: '320px', mb: '15px' } }, { children: "Great! Now let's start - tell us about yourself" }), void 0)) : (_jsxs(Typography, __assign({ align: "center", variant: "h2", sx: { fontWeight: '400', maxWidth: '320px', mb: '15px' } }, { children: ["Welcome to", ' ', _jsx(Typography, __assign({ variant: "h2", component: "span", sx: { fontWeight: '400', textDecorationLine: 'underline' } }, { children: swState.community.name }), void 0), "!"] }), void 0)), _jsx(Typography, __assign({ align: "center", variant: "h3", sx: { fontWeight: '400', maxWidth: '320px' } }, { children: "Tell us about you" }), void 0)] }), void 0), _jsx(Box, { sx: {
                                width: '45px',
                                height: '45px',
                            } }, void 0)] }), void 0), _jsx(Box, __assign({ sx: {
                        width: '100%',
                        display: 'flex',
                        justifyContent: 'center',
                        flexDirection: 'column',
                        alignItems: 'center',
                    } }, { children: _jsx("form", __assign({ onSubmit: handleSubmit(onSubmit) }, { children: _jsxs(Box, __assign({ sx: {
                                maxWidth: '382px',
                                display: 'flex',
                                justifyContent: 'center',
                                flexDirection: 'column',
                                alignItems: 'center',
                            } }, { children: [_jsx(Box, __assign({ sx: { width: '382px', mb: '18px' } }, { children: _jsx(Typography, __assign({ variant: "h4", sx: { fontWeight: '400', textDecorationLine: 'underline' } }, { children: "Nickname" }), void 0) }), void 0), _jsxs(Box, __assign({ sx: {
                                        position: 'relative',
                                        height: '68px',
                                        display: 'flex',
                                        alignContent: 'center',
                                        justifyContent: 'center',
                                        alignItems: 'center',
                                        backgroundColor: '#FFFFFF',
                                        mb: '18px',
                                        px: '16px',
                                    } }, { children: [_jsx(Typography, __assign({ sx: { color: '#707070', flex: 1, my: 'auto' }, variant: "h4" }, { children: "How do you want your community to call you?" }), void 0), _jsx(CustomInput, { maxLength: 12, name: "username", control: control, setValue: setValue, rules: { required: true }, defaultValue: swUserState.username }, void 0)] }), void 0), _jsx(Box, __assign({ sx: { width: '382px', mb: '18px' } }, { children: _jsx(Typography, __assign({ variant: "h3", sx: { fontWeight: '400', textDecorationLine: 'underline' } }, { children: "Avatar" }), void 0) }), void 0), _jsxs(Box, __assign({ sx: {
                                        height: '96px',
                                        alignContent: 'center',
                                        justifyContent: 'center',
                                        display: 'flex',
                                        backgroundColor: '#FFFFFF',
                                        mb: '24px',
                                        px: '16px',
                                    } }, { children: [_jsx(Typography, __assign({ sx: { color: '#707070', flex: 1, my: 'auto' }, variant: "h4" }, { children: "A public image - that\u2019s how others will see you." }), void 0), _jsx(Controller, { name: "profileImageUrl", control: control, rules: { required: true }, render: function (_a) {
                                                var _b = _a.field, name = _b.name, value = _b.value, onChange = _b.onChange, fieldState = _a.fieldState, formState = _a.formState;
                                                return (_jsxs(Box, __assign({ sx: { display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center', width: '75px' } }, { children: [_jsx(SwUploadFile, { mode: "dark", variant: "rounded", name: name, initialPreviewUrl: value, fileChange: function (file) { return __awaiter(void 0, void 0, void 0, function () {
                                                                var _a;
                                                                return __generator(this, function (_b) {
                                                                    switch (_b.label) {
                                                                        case 0:
                                                                            if (!file) return [3 /*break*/, 2];
                                                                            _a = onChange;
                                                                            return [4 /*yield*/, toBase64(file)];
                                                                        case 1:
                                                                            _a.apply(void 0, [_b.sent()]);
                                                                            return [3 /*break*/, 3];
                                                                        case 2:
                                                                            onChange(null);
                                                                            _b.label = 3;
                                                                        case 3: return [2 /*return*/];
                                                                    }
                                                                });
                                                            }); }, defaulUploadIcon: _jsx(Upload, { style: { fontSize: 30, fill: 'black' } }, void 0), sx: {
                                                                width: '50px',
                                                                height: '50px',
                                                            } }, void 0), !value ? (_jsx(Typography, __assign({ variant: "h4", sx: { textTransform: 'none', mt: '10px', color: '#454A4D' } }, { children: ".png or .jpg" }), void 0)) : ('')] }), void 0));
                                            } }, void 0)] }), void 0), _jsx(SwButton, { sx: {
                                        borderColor: 'primary.main',
                                        height: '75px',
                                        maxWidth: '320px',
                                    }, mode: "dark", component: Button, type: "submit", disabled: !isValid, label: "Next: Pick your Role" }, void 0)] }), void 0) }), void 0) }), void 0)] }, void 0) }), void 0));
};
export default UserDetails;
