var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var BaseNFTModel = /** @class */ (function () {
    function BaseNFTModel(data) {
        this.name = data.name;
        this.description = data.description;
        this.image = data.image;
        this.properties = data.properties;
    }
    return BaseNFTModel;
}());
export { BaseNFTModel };
var CommunityProperties = /** @class */ (function () {
    function CommunityProperties(data) {
        if (!data) {
            this.skills = {
                roles: [],
            };
        }
        else {
            this.skills = data.skills;
            this.template = data.template;
        }
    }
    return CommunityProperties;
}());
export { CommunityProperties };
var Community = /** @class */ (function (_super) {
    __extends(Community, _super);
    function Community(data) {
        if (data === void 0) { data = {}; }
        var _this = _super.call(this, data) || this;
        _this.properties = new CommunityProperties(data.properties);
        if (data.skills) {
            _this.properties.skills = data.skills;
            /* Sort by  isCoreTeamMember=false so that community roles are first
               to make use of index as Id
      
                Example of old roles:
                [
                  {
                    credits: 20,
                    roleName: 'Role 1,
                    isCoreTeamMember: false,
                  }
                ]
      
                becomes:
                [
                  {
                    id: 1,
                    roleName: 'Role 1,
                    isCoreTeamMember: false,
                  }
                ]
            
            */
            _this.properties.skills.roles = _this.properties.skills.roles
                .sort(function (a, b) { return (a.isCoreTeamMember === b.isCoreTeamMember ? 0 : a.isCoreTeamMember ? 1 : -1); })
                .map(function (role, index) {
                return __assign(__assign({}, role), { id: index + 1 });
            });
        }
        return _this;
    }
    return Community;
}(BaseNFTModel));
export { Community };
export var DefaultRoles = [
    {
        id: 4,
        roleName: 'Core Team',
        skills: [],
        isCoreTeamMember: true,
    },
    {
        id: 5,
        roleName: 'Advisor',
        skills: [],
        isCoreTeamMember: true,
    },
    {
        id: 6,
        roleName: 'Investor',
        skills: [],
        isCoreTeamMember: true,
    },
];
