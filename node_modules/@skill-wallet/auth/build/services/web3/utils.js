export var METAMASK_POSSIBLE_ERRORS = {
    '-32700': {
        standard: 'JSON RPC 2.0',
        message: 'Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text.',
    },
    '-32600': {
        standard: 'JSON RPC 2.0',
        message: 'The JSON sent is not a valid Request object.',
    },
    '-32601': {
        standard: 'JSON RPC 2.0',
        message: 'The method does not exist / is not available.',
    },
    '-32602': {
        standard: 'JSON RPC 2.0',
        message: 'Invalid method parameter(s).',
    },
    // '-32603': {
    //   standard: 'JSON RPC 2.0',
    //   message: 'Internal JSON-RPC error.',
    // },
    '-32000': {
        standard: 'EIP-1474',
        message: 'Invalid input.',
    },
    '-32001': {
        standard: 'EIP-1474',
        message: 'Resource not found.',
    },
    '-32002': {
        standard: 'EIP-1474',
        message: 'Resource unavailable.',
    },
    '-32003': {
        standard: 'EIP-1474',
        message: 'Transaction rejected.',
    },
    '-32004': {
        standard: 'EIP-1474',
        message: 'Method not supported.',
    },
    '-32005': {
        standard: 'EIP-1474',
        message: 'Request limit exceeded.',
    },
    '4001': {
        standard: 'EIP-1193',
        message: 'User rejected the request.',
    },
    '4100': {
        standard: 'EIP-1193',
        message: 'The requested account and/or method has not been authorized by the user.',
    },
    '4200': {
        standard: 'EIP-1193',
        message: 'The requested method is not supported by this Ethereum provider.',
    },
    '4900': {
        standard: 'EIP-1193',
        message: 'The provider is disconnected from all chains.',
    },
    '4901': {
        standard: 'EIP-1193',
        message: 'The provider is disconnected from the specified chain.',
    },
};
var isJson = function (str) {
    try {
        return !!JSON.parse(JSON.stringify(str));
    }
    catch (e) {
        return false;
    }
};
export var ParseSWErrorMessage = function (error) {
    var _a, _b, _c, _d, _e;
    if (!error) {
        return error;
    }
    if (isJson(error)) {
        error = JSON.parse(JSON.stringify(error));
    }
    var metamaskError = METAMASK_POSSIBLE_ERRORS[error === null || error === void 0 ? void 0 : error.code];
    if (metamaskError) {
        return metamaskError.message;
    }
    if ((error === null || error === void 0 ? void 0 : error.code) === 'CALL_EXCEPTION') {
        return (_a = error === null || error === void 0 ? void 0 : error.reason) === null || _a === void 0 ? void 0 : _a.toString();
    }
    if (error instanceof TypeError || error instanceof Error) {
        error = (_b = error.message) === null || _b === void 0 ? void 0 : _b.toString();
    }
    if ((_c = error === null || error === void 0 ? void 0 : error.data) === null || _c === void 0 ? void 0 : _c.message) {
        error = (_e = (_d = error === null || error === void 0 ? void 0 : error.data) === null || _d === void 0 ? void 0 : _d.message) === null || _e === void 0 ? void 0 : _e.toString();
    }
    if (typeof error !== 'string') {
        console.error(error);
        throw new Error('SW smart contract error message is not a string!');
    }
    var _f = error.split('execution reverted:'), mainMsg = _f[0], fullSwMsg = _f[1];
    var _g = (fullSwMsg || '').split('SkillWallet:'), swMainMsg = _g[0], parsedMsg = _g[1];
    return (parsedMsg || swMainMsg || fullSwMsg || mainMsg || 'Internal JSON-RPC error.').toString();
};
