var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import createCache from '@emotion/cache';
import { AttributesDefinitions } from '../types/sw-auth-config';
export var createShadowElement = function (_a) {
    var container = _a.container, className = _a.className;
    var shadowRoot = container.attachShadow({ mode: 'open' });
    var emotionRoot = document.createElement('style');
    var fontLink = document.createElement('link');
    fontLink.href = 'https://fonts.googleapis.com/css?family=Josefin+Sans';
    fontLink.rel = 'stylesheet';
    fontLink.type = 'text/css';
    var mountPoint = document.createElement('div');
    mountPoint.classList.add(className);
    var root = shadowRoot.appendChild(mountPoint);
    shadowRoot.insertBefore(fontLink, mountPoint);
    shadowRoot.insertBefore(emotionRoot, mountPoint);
    var cache = createCache({
        key: 'css',
        prepend: true,
        container: emotionRoot,
    });
    return {
        cache: cache,
        root: root,
        shadowRoot: shadowRoot,
        mountPoint: mountPoint,
    };
};
export var dispatchSwEvent = function (name, payload) {
    if (payload === void 0) { payload = null; }
    var event = new CustomEvent(name, {
        composed: true,
        cancelable: true,
        bubbles: true,
        detail: payload,
    });
    window.dispatchEvent(event);
    console.info("%c Event ".concat(name, " was dispatched with paylod ").concat(payload), 'color: #000;font-weight:bold;background:#eee');
};
export var checkIfAttributeHasChanged = function (prevValue, currValue) {
    var hasPreviousValue = prevValue !== null && prevValue !== undefined && prevValue !== '';
    if (hasPreviousValue && prevValue === currValue) {
        return false;
    }
    return true;
};
export var toCammelCase = function (name) { return name.replace(/-([a-z])/g, function (g) { return g[1].toUpperCase(); }); };
export var parseAttributeValue = function (name, value) {
    var type = AttributesDefinitions[name];
    switch (type) {
        case 'boolean':
            return value === 'true';
        case 'number':
            return Number(value);
        default:
            return value;
    }
};
export var AttributeNames = Object.keys(AttributesDefinitions).reduce(function (prev, curr) {
    prev[toCammelCase(curr)] = curr;
    return prev;
}, {});
console.log('AttributeNames', AttributeNames);
export var extractAttributes = function (nodeMap) {
    if (!nodeMap.attributes) {
        return {};
    }
    var htmlAttributes = __spreadArray([], nodeMap.attributes, true);
    var attributes = htmlAttributes.reduce(function (prev, curr) {
        var _a;
        var name = curr.name, value = curr.value;
        var key = toCammelCase(name);
        var isKeySupported = AttributeNames[key];
        if (isKeySupported) {
            prev = __assign(__assign({}, prev), (_a = {}, _a[key] = parseAttributeValue(name, value), _a));
        }
        return prev;
    }, {});
    console.log('Attributes: ', attributes);
    return attributes;
};
export var isElement = function (obj) {
    try {
        return obj instanceof HTMLElement;
    }
    catch (e) {
        return typeof obj === 'object' && obj.nodeType === 1 && typeof obj.style === 'object' && typeof obj.ownerDocument === 'object';
    }
};
