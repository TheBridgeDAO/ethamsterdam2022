var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Box, Input, Typography } from '@mui/material';
import { useEffect, useState } from 'react';
import { Controller } from 'react-hook-form';
export var CustomInput = function (_a) {
    var maxLength = _a.maxLength, name = _a.name, control = _a.control, setValue = _a.setValue, rules = _a.rules, defaultValue = _a.defaultValue;
    var _b = useState(defaultValue), inputValue = _b[0], setInputValue = _b[1];
    var _c = useState(maxLength), remainingChars = _c[0], setRemainingChars = _c[1];
    useEffect(function () {
        if (inputValue)
            setValue(name, inputValue, { shouldValidate: true });
    }, [name, setValue, inputValue]);
    var handleChange = function (event) {
        setRemainingChars(maxLength - event.target.value.length);
        setInputValue(event.target.value);
    };
    return (_jsx(Controller, { rules: rules, name: name, control: control, render: function (_a) {
            var field = _a.field, fieldState = _a.fieldState, formState = _a.formState;
            return (_jsxs(Box, __assign({ sx: { display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'flex-end' } }, { children: [_jsx(Input, { sx: {
                            color: '#000000',
                            mt: '14px',
                            maxHeight: '40px',
                            flex: 1,
                            border: 2,
                            borderColor: '#000000',
                        }, value: inputValue, onChange: handleChange, inputProps: { maxLength: maxLength }, type: "text" }, void 0), _jsxs(Typography, __assign({ align: "center", variant: "h6", sx: {
                            fontSize: 8,
                            color: '#707070',
                            transform: 'translate(-5px, -15px);',
                            mixBlendMode: 'difference',
                            fontWeight: '400',
                            maxWidth: '320px',
                            pointerEvents: 'none',
                        } }, { children: [remainingChars, " remaining characters"] }), void 0)] }), void 0));
        } }, void 0));
};
