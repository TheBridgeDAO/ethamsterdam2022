var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { Box, Slider, Typography } from '@mui/material';
import React, { useEffect } from 'react';
import { Controller } from 'react-hook-form';
export var CustomSlider = function (_a) {
    var name = _a.name, control = _a.control, setValue = _a.setValue, rules = _a.rules, onValueChange = _a.onValueChange, defaultValue = _a.defaultValue;
    console.log(defaultValue);
    var _b = React.useState(defaultValue), sliderValue = _b[0], setSliderValue = _b[1];
    useEffect(function () {
        if (sliderValue)
            setValue(name, sliderValue, { shouldValidate: true });
    }, [name, setValue, sliderValue]);
    var handleChange = function (event, newValue) {
        onValueChange(newValue);
        setSliderValue(newValue);
    };
    return (_jsx(Controller, { rules: rules, name: name, control: control, render: function (_a) {
            var field = _a.field, fieldState = _a.fieldState, formState = _a.formState;
            return (_jsxs(_Fragment, { children: [_jsx(Slider, { sx: { maxWidth: '166px', border: 2, borderRadius: 0, borderColor: '#000000', p: '10px' }, defaultValue: defaultValue, step: 1, min: 1, max: 10, value: sliderValue, onChange: handleChange }, void 0), _jsxs(Box, __assign({ sx: { width: '168px', px: '4px', display: 'flex', justifyContent: 'space-between' } }, { children: [_jsx(Typography, __assign({ align: "center", variant: "h5", sx: {
                                    fontWeight: '400',
                                    maxWidth: '320px',
                                    color: '#000',
                                } }, { children: "1" }), void 0), _jsx(Typography, __assign({ align: "center", variant: "h5", sx: {
                                    transform: 'translate(0px, -22px);',
                                    mixBlendMode: 'difference',
                                    fontWeight: '400',
                                    maxWidth: '320px',
                                    pointerEvents: 'none',
                                } }, { children: sliderValue }), void 0), _jsx(Typography, __assign({ align: "center", variant: "h5", sx: {
                                    fontWeight: '400',
                                    maxWidth: '320px',
                                    color: '#000',
                                } }, { children: "10" }), void 0)] }), void 0)] }, void 0));
        } }, void 0));
};
