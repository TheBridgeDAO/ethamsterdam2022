var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { Box, Dialog, Typography } from '@mui/material';
import { useSelector } from 'react-redux';
import { Route, Switch } from 'react-router-dom';
import CircularProgress from '@mui/material/CircularProgress';
import routes from '../config/routes';
import { uiData } from '../store/sw-ui-reducer';
function MainDialog(_a) {
    var container = _a.container, open = _a.open, handleClose = _a.handleClose;
    var uiState = useSelector(uiData);
    return (_jsx(_Fragment, { children: _jsxs(Dialog, __assign({ maxWidth: "xs", fullWidth: true, container: container, open: open, onClose: handleClose }, { children: [_jsx(Box, __assign({ sx: {
                        width: '99%',
                        minHeight: '460px',
                        minWidth: '480px',
                        display: uiState.showGlobalError ? 'flex' : 'none',
                        justifyContent: 'center',
                        flexDirection: 'column',
                        alignItems: 'center',
                    } }, { children: _jsx(Typography, __assign({ align: "center", sx: { mb: '26px', width: '90%' }, variant: "h2" }, { children: uiState.globalErrorMessage }), void 0) }), void 0), _jsxs(Box, __assign({ sx: {
                        width: '99%',
                        minHeight: '460px',
                        minWidth: '480px',
                        display: uiState.loading || uiState.validatingDomain ? 'flex' : 'none',
                        justifyContent: 'center',
                        flexDirection: 'column',
                        alignItems: 'center',
                    } }, { children: [(uiState.loadingMessage || uiState.validatingDomain) && (_jsx(Typography, __assign({ align: "center", sx: { mb: '26px', width: '90%' }, variant: "h2" }, { children: uiState.validatingDomain ? 'Validating domain name.' : uiState.loadingMessage }), void 0)), _jsx(CircularProgress, { color: "secondary" }, void 0)] }), void 0), _jsx(Box, __assign({ sx: {
                        display: !uiState.loading && !uiState.showGlobalError && !uiState.validatingDomain ? 'flex' : 'none',
                        alignContent: 'center',
                        justifyContent: 'center',
                    } }, { children: _jsx(Switch, { children: routes.map(function (route, index) {
                            return (_jsx(Route, { path: route.path, exact: route.exact, render: function (props) { return _jsx(route.component, __assign({}, props, route.props), void 0); } }, index));
                        }) }, void 0) }), void 0)] }), void 0) }, void 0));
}
export default MainDialog;
