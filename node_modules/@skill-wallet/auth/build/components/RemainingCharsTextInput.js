var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { Input, Typography } from '@mui/material';
import { useEffect, useState } from 'react';
var RemainingCharsTextInput = function (props) {
    var _a = useState(props.maxLength), remainingChars = _a[0], setRemainingChars = _a[1];
    useEffect(function () {
        var checkRemainingCharacters = function () {
            setRemainingChars(props.maxLength - props.value.length);
        };
        checkRemainingCharacters();
    }, [props.maxLength, props.value]);
    return (_jsxs(_Fragment, { children: [_jsx(Input, __assign({}, props), void 0), _jsxs(Typography, __assign({ sx: { position: 'relative', transform: 'translate(-30px, 33px)' }, variant: "caption" }, { children: [remainingChars, " characters left"] }), void 0)] }, void 0));
};
export default RemainingCharsTextInput;
